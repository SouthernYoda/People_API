openapi: 3.0.0
info:
  description: This is the swagger file that goes with our server code
  version: 2.0.0
  title: Swagger Rest Article

paths:
  "/people":
    get:
      operationId: people.read_all
      tags:
        - People
      summary: Read the entire set of people, sorted by last name
      description: Read the entire set of people, sorted by last name
      security:
#        - basic: []
        - jwt: ['secret']
      responses:
        "200":
          description: Successfully read people set operation
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    person_id:
                      type: string
                      description: Id of the person
                    fname:
                      type: string
                      description: First name of the person
                    lname:
                      type: string
                      description: Last name of the person
                    timestamp:
                      type: string
                      description: Creation/Update timestamp of the person
                    notes:
                      type: array
                      items:
                        properties:
                          person_id:
                            type: integer
                            description: Id of this note associated with
                          note_id:
                            type: integer
                            description: Id of this note
                          content:
                            type: string
                            description: content of this note
                          timestamp:
                            type: string
                            description: Create/Update timestamp of this note
    post:
      operationId: people.create
      tags:
        - People
      summary: Create a person
      parameters:
        - name: fname
          in: query
          description: Persons first name
          required: true
          schema:
            type: string
        - name: lname
          in: query
          description: Person's last name
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Successfully created person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'

  "/people/{person_id}":
    get:
      operationId: people.read_one
      tags:
        - People
      summary: Read one person
      description: Read one person
      parameters:
        - name: person_id
          in: path
          description: Id of the person to get
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully read person from people data operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  person_id:
                    type: string
                    description: Id of the person
                  fname:
                    type: string
                    description: First name of the person
                  lname:
                    type: string
                    description: Last name of the person
                  timestamp:
                    type: string
                    description: Creation/Update timestamp of the person record
                  notes:
                    type: array
                    items:
                      properties:
                        person_id:
                          type: integer
                          description: Id of person this note is associated with
                        note_id:
                          type: integer
                          description: Id of this note
                        content:
                          type: string
                          description: content of this note
                        timestamp:
                          type: string
                          description: Create/Update timestamp of this note
    put:
      operationId: people.update
      tags:
        - People
      summary: Update a person
      description: Update a person
      parameters:
        - name: person_id
          in: path
          description: Id the person to update
          required: true
          schema:
            type: integer
        - name: fname
          in: query
          description: First name of the person
          schema:
            type: string
        - name: lname
          in: query
          description: Last name of the person
          schema:
            type: string
      responses:
        "200":
          description: Successfully updated person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
    delete:
      operationId: people.delete
      tags:
        - People
      summary: Delete a person from the people list
      description: Delete a person
      parameters:
        - name: person_id
          in: path
          description: Id of the person to delete
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully deleted a person
  "/notes":
    get:
      operationId: notes.read_all
      tags:
        - Notes
      summary: Read the entire set of notes for all people, sorted by timestamp
      description: Read the entire set of notes for all people, sorted by timestamp
      responses:
        "200":
          description: Successfully read notes for all people operation
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    note_id:
                      type: integer
                      description: Id of the note
                    content:
                      type: string
                      description: Content of the note
                    timestamp:
                      type: string
                      description: Create/Update timestamp of the note
                    person:
                      type: object
                      properties:
                        person_id:
                          type: integer
                          description: Id of associated person
                        fname:
                          type: string
                          description: First name of associated person
                        lname:
                          type: string
                          description: Last name of associated person
                        timestamp:
                          type: string
                          description: Create/Update timestamp of associated person
  "/people/{person_id}/notes":
    post:
      operationId: notes.create
      tags:
        - Notes
      summary: Create a note associated with a person
      description: Create a note associated with a person
      parameters:
        - name: person_id
          in: path
          description: Id of person associated with note
          required: true
          schema:
            type: integer
        - name: content
          in: query
          description: Text of the note to create
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Successfully created a note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'

  "/people/{person_id}/notes/{note_id}":
    get:
      operationId: notes.read_one
      tags:
        - Notes
      summary: Read a particular note associated with a person
      description: Read a particular note associated with a person
      parameters:
        - name: person_id
          in: path
          description: Id of person associated with note
          required: true
          schema:
            type: integer
        - name: note_id
          in: path
          description: Id of note
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully read note for a person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
    put:
      operationId: notes.update
      tags:
        - Notes
      summary: Update a note associated with a person
      description: Update a note associated with a person
      parameters:
        - name: person_id
          in: path
          description: Id the person to update
          required: true
          schema:
            type: integer
        - name: note_id
          in: path
          description: Id of the note associated with a person
          required: true
          schema:
            type: integer
        - name: content
          in: query
          description: Text content of the note to update
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully updated note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
    delete:
      operationId: notes.delete
      tags:
        - Notes
      summary: Delete a note associated with a person
      description: Delete a note associated with a person
      parameters:
        - name: person_id
          in: path
          description: Id of person associated with note
          required: true
          schema:
            type: integer
        - name: note_id
          in: path
          description: Id of note
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully deleted a note
  "/auth/login":
    post:
      operationId: auth.generate_token
      tags:
        - Authentication
      security:
        - basic: []
      responses:
        200:
          description: secret response
          content:
            'text/plain':
              schema:
                type:
                  string
  "/auth/print-token":
    get:
      description: Return token contents
      operationId: auth.print_token
      security:
        - jwt: ['secret']
      responses:
        "200":
          description: secret response
          content:
            'text/plain':
              schema:
                type: string


components:
  schemas:
    Person:
      type: object
      properties:
        person_id:
          type: integer
          description: Id of associated person
        fname:
          type: string
          description: First name of associated person
        lname:
          type: string
          description: Last name of associated person
        timestamp:
          type: string
          description: Creation/Update timestamp of the note record
    Note:
      type: object
      properties:
        note_id:
          type: integer
          description: Id of the note
        person_id:
          type: integer
          description: Id of the person note associated with
        content:
          type: string
          description: Text content of the note
        timestamp:
          type: string
          description: Creation/Update timestamp of the note record
    CreatePerson:
      type: object
      properties:
        fname:
          type: string
          description: First name of person to create
        lname:
          type: string
          description: Last name of person to create
  securitySchemes:
    # oauth2:
    #   type: oauth2
    #   x-tokenInfoFunc: auth.dummy_function
    #   flows:
    #     implicit:
    #       authorizationUrl: http://localhost:5000/oauth2/dialog
    #       scopes:
    #         secret: Allow accessing secret
    basic:
        type: http
        scheme: basic
        x-basicInfoFunc: auth.basic_auth
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: auth.decode_token


servers:
  - url: http://localhost:5000/api
    description: local development instance
